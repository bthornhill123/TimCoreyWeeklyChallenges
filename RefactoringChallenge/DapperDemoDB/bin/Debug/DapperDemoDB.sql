/*
Deployment script for DapperDemoDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DapperDemoDB"
:setvar DefaultFilePrefix "DapperDemoDB"
:setvar DefaultDataPath "C:\Users\Tim\AppData\Local\Microsoft\VisualStudio\SSDT\DapperDemoDB"
:setvar DefaultLogPath "C:\Users\Tim\AppData\Local\Microsoft\VisualStudio\SSDT\DapperDemoDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[SystemUser]...';


GO
CREATE TABLE [dbo].[SystemUser] (
    [Id]        INT          IDENTITY (1, 1) NOT NULL,
    [FirstName] VARCHAR (50) NOT NULL,
    [LastName]  VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[spSystemUser_Create]...';


GO
CREATE PROCEDURE [dbo].[spSystemUser_Create]
	@FirstName VARCHAR(50),
	@LastName VARCHAR(50)
AS
begin
	insert into dbo.SystemUser (FirstName, LastName)
	values (@FirstName, @LastName);
end
GO
PRINT N'Creating [dbo].[spSystemUser_Get]...';


GO
CREATE PROCEDURE [dbo].[spSystemUser_Get]
AS
begin
	select [Id], [FirstName], [LastName]	 
	from dbo.SystemUser;
end
GO
PRINT N'Creating [dbo].[spSystemUser_GetFiltered]...';


GO
CREATE PROCEDURE [dbo].[spSystemUser_GetFiltered]
	@Filter VARCHAR(50)
AS
begin
	select [Id], [FirstName], [LastName] 
	from dbo.SystemUser
	WHERE FirstName LIKE @Filter 
		OR LastName LIKE @Filter;
end
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
IF NOT EXISTS (SELECT 1 FROM dbo.SystemUser)
BEGIN
	INSERT INTO dbo.SystemUser (FirstName, LastName)
	VALUES ('Tim', 'Corey'),
	('Mary', 'Smith'),
	('Jill', 'Bower'),
	('Matt', 'Stone');
end
GO

GO
PRINT N'Update complete.';


GO
